
import re
from collections import OrderedDict

from openpyxl import load_workbook

from .assets import STORAGE_PLATE_TEMPLATE, SCREEN_PLATE_TEMPLATE
from .platero import config
from platero.model.models import Protein, PROTEIN_ID_REGEX
from platero.utils import timestamp
from platero.wellplate import WellPlate96, BaitStoragePlate, NEG_CONTROL, POS_CONTROL

DELIMITER = ' / '
DELIMITER_RE = re.compile('\s*/\s*')
TEMPLATE_CELL_RE = re.compile("^\s*({protein_id})\s*/\s*\s*({protein_id})\s*$".format(protein_id=PROTEIN_ID_REGEX))

class TemplateWorkbook(object):
    ws_info = 'Info'

    def __init__(self, template):
        """ Loads the workbook from the specified template file """
        self.source = template
        self.reload()

    def reload(self):
        """ Reload the workbook from the original source """
        self.wb = load_workbook(self.source)

    def remove_sheet_by_name(self, sheet_name):
        try:
            ws = self.wb.get_sheet_by_name(sheet_name)
            self.wb.remove_sheet(ws)
        except KeyError:
            pass

    def set_info(self, metadata):
        """
        Set info sheet with metadata provided as OrderedDict. The info
        sheet is cleared before adding the metadata. Some additional
        info is also added.
        """
        self.remove_sheet_by_name(self.ws_info)
        ws = self.wb.create_sheet(title=self.ws_info)

        # TODO: move to save()
        info = OrderedDict({
            'Generated By': "{} v{}".format(config.APP_TITLE, config.APP_VERSION),
            'Generated On': timestamp()
        })
        metadata.update(info)

        for row, key in enumerate(metadata):
            ws.cell(row=row + 1, column=1).value = key
            ws.cell(row=row + 1, column=2).value = metadata[key]

        # Adjust column width for readability
        ws.column_dimensions['A'].width = 20
        ws.column_dimensions['B'].width = 40

    def set_cell_range(self, sheet_name, range_name, values):
        """
        Set the values of an range of cells from a given list of values
        """
        ws = self.wb.get_sheet_by_name(sheet_name)
        cells = ws.get_named_range(range_name)

        if len(cells) != len(values):
            raise AttributeError("The number of values ({}) doesn't match the " \
                "size of the cell range ({})".format(len(values), len(cells)))

        for cell, value in zip(cells, values):
            cell.value = value

    def save(self, destination):
        """ Save the workbook to the specified destination """
        self.wb.save(destination)

# TODO: refactor these functions cleaner, so ugly!
def display_protein(protein, property):
    if type(protein)==Protein:
        return getattr(protein, property)
    return ''

def display_interaction(interaction, property):

    if type(interaction)==dict:
        if interaction['prey'] in [POS_CONTROL, NEG_CONTROL, '', None]:
            return interaction['prey']

        return '{bait}{delimiter}{prey}'.format(
            bait = display_protein(interaction['bait'], property),
            prey = display_protein(interaction['prey'], property),
            delimiter = DELIMITER
        )
    return ''

def export_screen_plate(filename, plate, metadata):
    ws_template = 'Template'
    rng_template_proteins = 'rng_template_proteins'
    rng_template_nicknames = 'rng_template_nicknames'
    rng_template_labels = 'rng_template_labels'

    ws_pipetting = 'Pipetting'
    rng_pipetting_labels = 'rng_pipetting_labels'
    rng_pipetting_prey = 'rng_pipetting_prey'
    rng_pipetting_bait = 'rng_pipetting_bait'

    wb = TemplateWorkbook(SCREEN_PLATE_TEMPLATE)

    # Template sheet
    plate_label = 'Plate: {}'.format(plate.name)
    wb.set_cell_range(ws_template, rng_template_labels, [plate_label])

    proteins = [display_interaction(interaction, 'id') for cell, interaction in plate.values.items()]
    wb.set_cell_range(ws_template, rng_template_proteins, proteins)

    nicknames = [display_interaction(interaction, 'nickname') for cell, interaction in plate.values.items()]
    wb.set_cell_range(ws_template, rng_template_nicknames, nicknames)

    # Pipetting sheet
    bait_label = 'Bait plate: {}'.format(plate.bait_plate_name)
    prey_label = 'Prey plate: {}'.format(plate.prey_plate_name)
    pipetting_labels = [plate_label, bait_label, prey_label]
    wb.set_cell_range(ws_pipetting, rng_pipetting_labels, pipetting_labels)

    preys = [display_protein(interaction['prey'], 'nickname') for cell, interaction in plate.values.items()]
    wb.set_cell_range(ws_pipetting, rng_pipetting_prey, preys)

    baits = [display_protein(bait, 'nickname') for cell, bait in plate.bait_plate.values.items()]
    wb.set_cell_range(ws_pipetting, rng_pipetting_bait, baits)

    wb.set_info(metadata)
    wb.save(filename)

def export_storage_plate(filename, plate, metadata):
    ws_proteins = 'Proteins'
    rng_labels = 'rng_labels'
    rng_proteins = 'rng_proteins'
    rng_nicknames  = 'rng_nicknames'

    wb = TemplateWorkbook(STORAGE_PLATE_TEMPLATE)

    # Proteins sheet
    plate_label = 'Plate: {}'.format(plate.name)
    wb.set_cell_range(ws_proteins, rng_labels, [plate_label])

    proteins = [display_protein(protein, 'id') for cell, protein in plate.values.items()]
    wb.set_cell_range(ws_proteins, rng_proteins, proteins)

    nicknames = [display_protein(protein, 'nickname')for cell, protein in plate.values.items()]
    wb.set_cell_range(ws_proteins, rng_nicknames, nicknames)

    wb.set_info(metadata)
    wb.save(filename)
